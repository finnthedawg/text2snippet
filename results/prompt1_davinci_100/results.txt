[" 1.0e+12", " kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=10, n_jobs=1) kmeans.fit(x)", " sorted(a, key=lambda x: x[1] + x[2])", " [(i, sum(j) / len(j)) for i, j in list(daily.items())]", " ['happy', 'hats', 'for', 'cats']", " df.apply(lambda x: x.mean())", " 200", " [(i, j) for i, j in zip(a, b)]", " [s.text for s in soup.find_all('div', attrs={'class': 'post-text'}) if not s.find('div', attrs={'class': 'post-text-tag'})][", " the_list.sort(key=lambda x: x[:-1].count(\"_\"))", " sorted(s.lower().encode('ascii'), key=lambda x: x.lower())", " [(i, j[i]) for i, j in list(j)]", " re.match('^(.+)\\\\n((?:\\\\n.+)+)', 'line1", " [(i, j) for i, j in zip(a, b)]", " [x[0], x[1], x[2], ..., x[n]]", " len([x for x in j if x > 5])", " [0, 1, 2, 3, 4, 5, 6, 7, 8]", " os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')", " str.isalnum() and str.isdecimal() and str.isdigit() and str.isnumeric() and str.islower() and str.isupper() and str.isspace() and str.istitle()", " db.execute('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)", " pygame.display.set_mode((800, 600), pygame.FULLSCREEN)", " sorted(xs, key=len)", " '{\"data\": { \"key1\": \"val1\", \"key2\": \"val2\" }}'", " os.path.getmtime(path)", " sentence.strip()", " user in group1 or user in group2", " x[2:-1]", " del mydict[key]", " {key: val for key, val in list(d1.items()) if key in d}", " df['col'].astype(datetime)", " len(re.findall('?', my_text))", " CPU: RAM:", " last = s[-1]", " [int(i) for i in str_list]", " datetime.datetime(2005, 1, 1, 13, 33, 0)", " datetime.datetime.strptime('24052010', '%d%m%Y').date()", " df = pd.read_csv('filename.txt', sep=';')", " [(1, 3, 5), (2, 4, 6)]", " sentence.strip()", " select * from my_table where date_column >= current_date()", " [float(i) for i in lst]", " df.drop(['a'], axis=1)", " [(a[i], b[i]) for i in range(len(a))]", " os.environ['KEY_THAT_MIGHT_EXIST'] or default_value", " sorted(list(d.items()), key=lambda x: x['date'], reverse=True)", " print(str(your_number) + '.' + str(your_number // 100) + '.' + str(your_number // 10) + '.' + str(your_number // 1))", " '/usr/var/log'", " selenium.click('section-select-all')", " int('0xdeadbeef', 16)", " plt.xlabel('X')", " ''.join(s.split('&'))", " sorted(s.count(x) for x in s)", " [[2, 3, 4], [2, 3, 4], [2, 3, 4]]", " {1: 'a', 2: 'b', 3: 'c', 4: 'd'}", " [(i, j) for i, j in enumerate(range(n))]", " adict.as_str()", " [(key, val) for key, val in list(my_dictionary.items()) if key in my_list]", " textblock.replace(r'\\s+', ' ')", " len(s.split())", " your string.decode('utf-8', 'replace')", " a[:index] + a[index+1:]", " user.groups.get(name='Member')", " os.path.getctime(path_to_file)", " Hello, world!", " number = getattr(myobject, 'id', None) if myobject else None", " label[label['name'] == 'Test']", " ChildClass.__init__(self, args)", " s[0][0]", " random.SystemRandom().randint(0, 9999)", " string1 == string2", " var = input()", " ['a', 'ab', 'abc', 'abcd']", " d.has_key(key)", " del a[0]", " maketrans('ABC', 'abc')", " [(0, 0, 0), (0, 0, 1), (0, 1, 0), (0, 1, 1), (1, 0, 0), (1, 0, 1), (1, 1, 0), (", " [{'Name': d['Name']} for d in thisismylist]", " res_list = [(row[0], row[1]) for row in rows]", " br.addheaders('Cookie', 'cookiename=cookie value')", " text[len(text) - len(suffix):]", " df.groupby('Country').Accidents.agg({'Sum of Accidents': 'count'})", " from some.package import *", " [int(x[i:i+1]) for i in range(0, len(x), 1)]", " A[A!=B]", " l.sort(key=lambda x: x.lower())", " binascii.hexlify(data)", " len(str.find(s, 15))", " files.sort(key=lambda x: x[file_number])", " {'x': [x.split('=') for x in 'x=1,2,3']}", " [(i, j) for i, j in enumerate(L) if i == 0 and j == 53]", " ord(c)", " words.all()", " datetime.datetime(1995, 1, 1)", " {'test': 'cheers'}", " sorted(d.items(), key=lambda x: x[1], reverse=True)", " df.loc[['Alabama_exp', 'Credit_exp'], ['Alabama_exp', 'Credit_exp'].apply(lambda x: round(x, 2) if x[0] == 'Alabama_exp' else round", " datetime.datetime.today() - timedelta(days=1)", " [os.path.join(directory, subdir) for subdir in os.listdir(directory)]", " True or False", " from django.conf.urls import patterns, url"]