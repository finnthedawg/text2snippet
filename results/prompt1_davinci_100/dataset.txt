[{"question": "format number 1000000000.0 using latex notation", "truth": "print('\\\\num{{{0:.2g}}}'.format(1000000000.0))"}, {"question": "Fit Kmeans function to a one-dimensional array `x` by reshaping it to be a multidimensional array of single values", "truth": "km.fit(x.reshape(-1, 1))"}, {"question": "sort list `a` in ascending order based on the addition of the second and third elements of each tuple in it", "truth": "sorted(a, key=lambda x: (sum(x[1:3]), x[0]))"}, {"question": "find the sums of length 7 subsets of a list `daily`", "truth": "weekly = [sum(visitors[x:x + 7]) for x in range(0, len(daily), 7)]"}, {"question": "split string 'happy_hats_for_cats' using string '_for_'", "truth": "re.split('_for_', 'happy_hats_for_cats')"}, {"question": "calculate the mean of columns with same name in dataframe `df`", "truth": "df.groupby(by=df.columns, axis=1).mean()"}, {"question": "Check the status code of url \"www.python.org\"", "truth": "conn = httplib.HTTPConnection('www.python.org')\nconn.request('HEAD', '/')\nr1 = conn.getresponse()\nprint(r1.status, r1.reason)"}, {"question": "get the sum of the products of each pair of corresponding elements in lists `a` and `b`", "truth": "sum(x * y for x, y in zip(a, b))"}, {"question": "Get all the texts without tags from beautiful soup object `soup`", "truth": "\"\"\"\"\"\".join(soup.findAll(text=True))"}, {"question": "sort list of strings `the_list` by integer suffix before \"_\"", "truth": "sorted(the_list, key=lambda x: int(x.split('_')[1]))"}, {"question": "get a sorted list of the characters of string `s` in lexicographic order, with lowercase letters first", "truth": "sorted(s, key=str.lower)"}, {"question": "get a list of all items in list `j` with values greater than `5`", "truth": "[x for x in j if x >= 5]"}, {"question": "regular expression \"^(.+)\\\\n((?:\\\\n.+)+)\" matching a multiline block of text", "truth": "re.compile('^(.+)\\\\n((?:\\\\n.+)+)', re.MULTILINE)"}, {"question": "sum the product of each two items at the same index of list `a` and list `b`", "truth": "sum(i * j for i, j in zip(a, b))"}, {"question": "convert list `x` into a flat list", "truth": "y = map(operator.itemgetter(0), x)"}, {"question": "get the number of values in list `j` that is greater than 5", "truth": "len([1 for i in j if (i > 5)])"}, {"question": "generate a list of consecutive integers from 0 to 8", "truth": "list(range(9))"}, {"question": "set the current working directory to 'c:\\\\Users\\\\uname\\\\desktop\\\\python'", "truth": "os.chdir('c:\\\\Users\\\\uname\\\\desktop\\\\python')"}, {"question": "check if string `str` is palindrome", "truth": "str(n) == str(n)[::-1]"}, {"question": "execute sql query 'INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)' with all parameters in list `tup`", "truth": "cur.executemany('INSERT INTO table VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)', tup)"}, {"question": "Set the resolution of a monitor as `FULLSCREEN` in pygame", "truth": "pygame.display.set_mode((0, 0), pygame.FULLSCREEN)"}, {"question": "sort list `xs` in ascending order of length of elements", "truth": "xs.sort(lambda x, y: cmp(len(x), len(y)))"}, {"question": "Serialize dictionary `data` and its keys to a JSON formatted string", "truth": "json.dumps({str(k): v for k, v in data.items()})"}, {"question": "get modification time of file `path`", "truth": "os.path.getmtime(path)"}, {"question": "remove all whitespace in a string `sentence`", "truth": "sentence.replace(' ', '')"}, {"question": "check if a user `user` is in a group from list of groups `['group1', 'group2']`", "truth": "return user.groups.filter(name__in=['group1', 'group2']).exists()"}, {"question": "get a new string with the 3rd to the second-to-last characters of string `x`", "truth": "x[2:(-2)]"}, {"question": "Delete an item with key \"key\" from `mydict`", "truth": "mydict.pop('key', None)"}, {"question": "combine two dictionaries `d ` and `d1`, concatenate string values with identical `keys`", "truth": "dict((k, d.get(k, '') + d1.get(k, '')) for k in keys)"}, {"question": "convert the dataframe column 'col' from string types to datetime types", "truth": "df['col'] = pd.to_datetime(df['col'])"}, {"question": "count the number of trailing question marks in string `my_text`", "truth": "len(my_text) - len(my_text.rstrip('?'))"}, {"question": "get current CPU and RAM usage", "truth": "psutil.cpu_percent()\npsutil.virtual_memory()"}, {"question": "assign the index of the last occurence of `x` in list `s` to the variable `last`", "truth": "last = len(s) - s[::-1].index(x) - 1"}, {"question": "convert list of strings `str_list` into list of integers", "truth": "[int(i) for i in str_list]"}, {"question": "parse string \"Jun 1 2005  1:33PM\" into datetime by format \"%b %d %Y %I:%M%p\"", "truth": "datetime.strptime('Jun 1 2005  1:33PM', '%b %d %Y %I:%M%p')"}, {"question": "convert date string '24052010' to date object in format '%d%m%Y'", "truth": "datetime.datetime.strptime('24052010', '%d%m%Y').date()"}, {"question": "create pandas data frame `df` from txt file `filename.txt` with column `Region Name` and separator `;`", "truth": "df = pd.read_csv('filename.txt', sep=';', names=['Region Name'])"}, {"question": "zip lists `[1, 2], [3, 4], [5, 6]` in a list", "truth": "zip(*[[1, 2], [3, 4], [5, 6]])"}, {"question": "remove all whitespaces in a string `sentence`", "truth": "sentence = ''.join(sentence.split())"}, {"question": "SQLAlchemy select records of columns of table `my_table` in addition to current date column", "truth": "print(select([my_table, func.current_date()]).execute())"}, {"question": "convert all of the items in a list `lst` to float", "truth": "[float(i) for i in lst]"}, {"question": "drop a single subcolumn 'a' in column 'col1' from a dataframe `df`", "truth": "df.drop(('col1', 'a'), axis=1)"}, {"question": "interleave the elements of two lists `a` and `b`", "truth": "[j for i in zip(a, b) for j in i]"}, {"question": "get value of the environment variable 'KEY_THAT_MIGHT_EXIST' with default value `default_value`", "truth": "print(os.getenv('KEY_THAT_MIGHT_EXIST', default_value))"}, {"question": "sort a list of dictionary values by 'date' in reverse order", "truth": "list.sort(key=lambda item: item['date'], reverse=True)"}, {"question": "print a digit `your_number` with exactly 2 digits after decimal", "truth": "print('{0:.2f}'.format(your_number))"}, {"question": "get relative path of path '/usr/var' regarding path '/usr/var/log/'", "truth": "print(os.path.relpath('/usr/var/log/', '/usr/var'))"}, {"question": "click on the text button 'section-select-all' using selenium python", "truth": "browser.find_element_by_class_name('section-select-all').click()"}, {"question": "convert hex string '0xdeadbeef' to decimal", "truth": "ast.literal_eval('0xdeadbeef')"}, {"question": "set labels `[1, 2, 3, 4, 5]` on axis X in plot `plt`", "truth": "plt.xticks([1, 2, 3, 4, 5])"}, {"question": "cut a string by delimiter '&'", "truth": "s.rfind('&')"}, {"question": "print letter that appears most frequently in string `s`", "truth": "print(collections.Counter(s).most_common(1)[0])"}, {"question": "Create sub matrix of a list of lists `[[2, 3, 4], [2, 3, 4], [2, 3, 4]]` (without numpy)", "truth": "[[2, 3, 4], [2, 3, 4], [2, 3, 4]]"}, {"question": "combine two lists `[1, 2, 3, 4]` and `['a', 'b', 'c', 'd']` into a dictionary", "truth": "dict(zip([1, 2, 3, 4], ['a', 'b', 'c', 'd']))"}, {"question": "get all combination of n binary values", "truth": "lst = map(list, itertools.product([0, 1], repeat=n))"}, {"question": "convert dictionary `adict` into string", "truth": "\"\"\"\"\"\".join('{}{}'.format(key, val) for key, val in sorted(adict.items()))"}, {"question": "get key-value pairs in dictionary `my_dictionary` for all keys in list `my_list` in the order they appear in `my_list`", "truth": "dict(zip(my_list, map(my_dictionary.get, my_list)))"}, {"question": "remove line breaks from string `textblock` using regex", "truth": "re.sub('(?<=[a-z])\\\\r?\\\\n', ' ', textblock)"}, {"question": "count the number of words in a string `s`", "truth": "len(s.split())"}, {"question": "Convert escaped utf string to utf string in `your string`", "truth": "print('your string'.decode('string_escape'))"}, {"question": "remove the element in list `a` at index `index`", "truth": "del a[index]"}, {"question": "in django, check if a user is in a group 'Member'", "truth": "return user.groups.filter(name='Member').exists()"}, {"question": "get the creation time of file `path_to_file`", "truth": "return os.path.getctime(path_to_file)"}, {"question": "un-escape a backslash-escaped string in `Hello,\\\\nworld!`", "truth": "print('\"Hello,\\\\nworld!\"'.decode('string_escape'))"}, {"question": "Evaluate a nested dictionary `myobject.id.number` to get `number` if `myobject` is present with getattr", "truth": "getattr(getattr(myobject, 'id', None), 'number', None)"}, {"question": "Check if the value of the key \"name\" is \"Test\" in a list of dictionaries `label`", "truth": "any(d['name'] == 'Test' for d in label)"}, {"question": "call base class's __init__ method from the child class `ChildClass`", "truth": "super(ChildClass, self).__init__(*args, **kwargs)"}, {"question": "split string `s` by '@' and get the first element", "truth": "s.split('@')[0]"}, {"question": "generate a 12-digit random number", "truth": "'%0.12d' % random.randint(0, 999999999999)"}, {"question": "case insensitive comparison of strings `string1` and `string2`", "truth": "if (string1.lower() == string2.lower()):\n    print('The strings are the same (case insensitive)')\nelse:\n    print('The strings are not the same (case insensitive)')"}, {"question": "print \"Please enter something: \" to console, and read user input to `var`", "truth": "var = input('Please enter something: ')"}, {"question": "Get all the matches from a string `abcd` if it begins with a character `a`", "truth": "re.findall('[^a]', 'abcd')"}, {"question": "Check if a given key `key` exists in dictionary `d`", "truth": "if (key in d):\n    pass"}, {"question": "Delete an element 0 from a dictionary `a`", "truth": "{i: a[i] for i in a if (i != 0)}"}, {"question": "replace a string `Abc` in case sensitive way using maketrans", "truth": "\"\"\"Abc\"\"\".translate(maketrans('abcABC', 'defDEF'))"}, {"question": "get all combination of 3 binary values", "truth": "bin = [0, 1]\n[(x, y, z) for x in bin for y in bin for z in bin]"}, {"question": "create a list where each element is a value of the key 'Name' for each dictionary `d` in the list `thisismylist`", "truth": "[d['Name'] for d in thisismylist]"}, {"question": "get a list `res_list` of the first elements of each tuple in a list of tuples `rows`", "truth": "res_list = [x[0] for x in rows]"}, {"question": "Add header `('Cookie', 'cookiename=cookie value')` to mechanize browser `br`", "truth": "br.addheaders = [('Cookie', 'cookiename=cookie value')]"}, {"question": "remove a substring `suffix` from the end of string `text`", "truth": "if (not text.endswith(suffix)):\n    return text\nreturn text[:(len(text) - len(suffix))]"}, {"question": "get the count of each unique value in column `Country` of dataframe `df` and store in column `Sum of Accidents`", "truth": "df.Country.value_counts().reset_index(name='Sum of Accidents')"}, {"question": "import all classes from module `some.package`", "truth": "globals().update(importlib.import_module('some.package').__dict__)"}, {"question": "change a string of integers `x` separated by spaces to a list of int", "truth": "x = map(int, x.split())"}, {"question": "remove elements from an array `A` that are in array `B`", "truth": "A[np.all(np.any(A - B[:, (None)], axis=2), axis=0)]"}, {"question": "custom sort an alphanumeric list `l`", "truth": "sorted(l, key=lambda x: x.replace('0', 'Z'))"}, {"question": "encode string `data` using hex 'hex' encoding", "truth": "print(data.encode('hex'))"}, {"question": "find the index of sub string 's' in string `str` starting from index 15", "truth": "str.find('s', 15)"}, {"question": "sort list `files` based on variable `file_number`", "truth": "files.sort(key=file_number)"}, {"question": "convert string `x'  to dictionary splitted by `=` using list comprehension", "truth": "dict([x.split('=') for x in s.split()])"}, {"question": "get the indices of tuples in list of tuples `L` where the first value is 53", "truth": "[i for i, v in enumerate(L) if v[0] == 53]"}, {"question": "get the ASCII value of a character as an int", "truth": "ord()"}, {"question": "check if all string elements in list `words` are upper-cased", "truth": "print(all(word[0].isupper() for word in words))"}, {"question": "parse string '01-Jan-1995' into a datetime object using format '%d-%b-%Y'", "truth": "datetime.datetime.strptime('01-Jan-1995', '%d-%b-%Y')"}, {"question": "Execute a post request to url `http://httpbin.org/post` with json data `{'test': 'cheers'}`", "truth": "requests.post('http://httpbin.org/post', json={'test': 'cheers'})"}, {"question": "Sort dictionary `d` by value in descending order", "truth": "sorted(d, key=d.get, reverse=True)"}, {"question": "round off entries in dataframe `df` column `Alabama_exp` to two decimal places, and entries in column `Credit_exp` to three decimal places", "truth": "df.round({'Alabama_exp': 2, 'Credit_exp': 3})"}, {"question": "get yesterday's date as a string in `YYYY-MM-DD` format using timedelta", "truth": "(datetime.now() - timedelta(1)).strftime('%Y-%m-%d')"}, {"question": "get a list of all subdirectories in the directory `directory`", "truth": "[x[0] for x in os.walk(directory)]"}, {"question": "check if a local variable `myVar` exists", "truth": "('myVar' in locals())"}, {"question": "Configure url in django properly", "truth": "url('^', include('sms.urls')),"}]