[" sorted_ips_data = sorted(ips_data, key=['data_two'])", " dict(key, value)", " list(A)", " [some_string.encode('utf-8') for some_string in urllib.urlencode(some_string)]", " list.append(foo)", " dict[key]", " {'-l': 'ls -l'}", " int(y)", " L = sorted(L, key=lambda x: x[1])", " 3.0005", " y.sort(key=lambda x: x[1], reverse=True)", " array `b`", " `some_func(params)`", " int(u'\u3042')", " hash(a) == hash(b)", " x.merge(y, 'a', 'b')", " (1, 2, 3, 4)", " list(a[i] / b[i])", " url = url.replace(\"com\", \"\").replace(\".\", \"\")", " db.execute(<sql here>)", " list(mypath.walk('./*'))", " list of files in current directory", " listofsubtracts = [i - j for i, j in list(L)]", " None", " [0, 1, 2, 3, 4, 5]", " myLIst.values(key=gold).sum()", " new_list = old_list.copy()", " [baz for foo in foos if foo.key == 'baz']", " list(filter(lambda x: x in formula, list(formula.lower())))", " int(binary_to_int('010101', 2))", " filepath = filepath.replace('\\\\', '/')", " list of strings", " df2.ix[df1.ix[df1.columns == 'A' & df1.columns == 'B' & df1.columns == 'C' & df1.columns == 'D']]", " [datetime.date(2014, 1, 1), datetime.date(2014, 1, 2), datetime.date(2014, 1, 3), datetime.date(2014, 1, 4), datetime.date(", " data_df.columns = ['grade', 'grade_float', 'grade_int']", " random.random(1, 7)", " df.A = 'foo'", " string = 'abcdefghijklmnopqrstuvwxyz'", " list of all occurrences of the substring", " sum(l)", " datetime.now() + datetime.timedelta(days=1, hours=3)", " {key: val for key, val in iterable}", " regex = Regex('^[^a-zA-Z0-9]*$')", " redirect_to('Home.views.index')", " '{0:.2f} {1:.2f}'", " x[2] = 77", " True if key1 is in dict, False otherwise", " [\u2018n/a\u2019]", " True if all the lists in \"items\" have a non-zero third element, otherwise False", " sdfasdf[substring(sdfasdf, index(sdfasdf, 'cc'))]", " True if `a` contains the row, False otherwise", " dataframe = pd.DataFrame(my_list)", " plot(ts, marker='.')", " a[a>0]", " yourdf.drop(columnheading1, columnheading2)", " list(a)", " 2", " x.duplicate(5)", " sorted(d.values())", " tkinter.window.close()", " list(num)", " list(L.map(lambda x: x.encode('hex')))", " {(key, value) for key, value in myListOfTuples}", " '['a', 'b', 'c', 'd']'", " a[-1] = a[-1] + 1", " sum(string.ascii_letters)", " {rows: [{key: value for key, value in rows}]}", " list(a.index(11.5))", " time()", " md5sum(my_dir)", " '<markup>this is my string</markup>'", " plot(monthly_mean[monthly_mean['index'] == 'A'], monthly_mean['index'], type='l', xlab='index', ylab='A')", " sum(len(x))", " str1.match(regex)", " [x.strftime(\"%Y-%m-%d\") for x in df.Date]", " 1255000", " matrix = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0, 0, 0, 0], [0, 0", " ['f', 'o', 'b', 'a', 'r']", " variable = [1, 2, 3, 4, 5]", " longlongTESTstringTEST", " s.replace('cat', 'Bull')", " ['hel', 'lo', 'bye']", " int(binary_to_int(string_to_binary(01010101111)))", " '/home/username/'", " input[onclick*='1 Bedroom Deluxe']", " [float(i) for i in string.split(string.join(',', string.split(string.join(',', string.split(string.join(',', string.split(string.join(',', string.", " myList = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,", " data[1:9]", " True if any of the items in `search` appear in `string`", " ax.set_label(u'\\xe9', u'\\xe3', u'\\xe2')", " datetime.datetime.strptime(s, '%Y-%m-%d %H:%M:%S')", " s.match(regex)", " {key: value for key, value in list(messages.items()) if key == 'content'}", " data.sort(key=lambda x: x[0], reverse=True)", " textCtrl.set_size(300, 300)", " default_data = {'item4': 4, 'item5': 5}", " item.replace(/([^()]+)$/, '')", " ['10', '3', '2']", " mean(df1[df1['a'].values == df2['a'].values for df1['a'] in df1])", " some_command(input_file, output_file)"]